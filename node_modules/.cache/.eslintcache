[{"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/index.js":"1","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/App.js":"2","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/serviceWorker.js":"3","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/navBar/navbar.jsx":"4","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx":"5","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/mergeSortLogic.js":"6","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/bubbleSortLogic.js":"7","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/heapSortLogic.js":"8","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/quickSortLogic.js":"9","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/radixSortLogic.js":"10","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/selectionSortLogic.js":"11","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/insertionSort.js":"12"},{"size":495,"mtime":1647188431385,"results":"13","hashOfConfig":"14"},{"size":357,"mtime":1647189945587,"results":"15","hashOfConfig":"14"},{"size":4951,"mtime":1647108690628,"results":"16","hashOfConfig":"14"},{"size":1473,"mtime":1647189913072,"results":"17","hashOfConfig":"14"},{"size":12726,"mtime":1647258141937,"results":"18","hashOfConfig":"14"},{"size":2658,"mtime":1647188074475,"results":"19","hashOfConfig":"14"},{"size":1016,"mtime":1647248578715,"results":"20","hashOfConfig":"14"},{"size":1817,"mtime":1647251303573,"results":"21","hashOfConfig":"14"},{"size":1731,"mtime":1647251302826,"results":"22","hashOfConfig":"14"},{"size":1181,"mtime":1647257449020,"results":"23","hashOfConfig":"14"},{"size":1024,"mtime":1647257779299,"results":"24","hashOfConfig":"14"},{"size":908,"mtime":1647258078209,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"oky8wo",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/index.js",[],[],["65","66"],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/App.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/serviceWorker.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/navBar/navbar.jsx",["67"],[],"import React, { Component } from 'react';\nimport \"./nav.css\";\n\n// Stateless Functional Component\n// i.e. a component that does not have its own local stored data in state variable. Hence it only recieves the data from the parent element.\n\n// First way of presenting a stateless component via Function\n// here we delete this object and pass props as parameter to function`\n// const NavBar = (props) => {\n//     return (\n//         <nav className=\"navbar navbar-light bg-light\">\n//             <div className=\"container-fluid\">\n//             <a className=\"navbar-brand\" href=\"#\">\n//                 Navbar <span className='badge badege-pill badge-secondary'>\n//                     {props.totalCounters}\n//                 </span>\n//             </a>\n//             </div>\n//         </nav>\n//     );\n// };\n\n// Second way of presenting a component via Class method\nclass NavBar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-light bg-light\">\n              <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">\n                      <span id=\"author\" className='badge badege-pill badge-secondary'>Nikita Izmailov's</span>\n                      <span id='appName' className='badge m-2 badge-primary'>\n                          Sorting Algorithm Application\n                      </span>\n                </a>\n              </div>\n            </nav>\n            );\n    }\n}\n\n\nexport default NavBar;","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx",["68"],[],"import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSortLogic.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSortLogic.js';\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSortLogic.js'\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSortLogic.js';\nimport { getRadixSortAnimations } from '../sortingAlgorithms/radixSortLogic.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSortLogic.js';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort.js';\n\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'lightblue';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n// This is the time taken for the selected Sorting Algorithm to run.\nlet timeTaken = 0;\n\nexport default class SortingVisualizer extends React.Component {\n\n  // We using constructor when initialising an object from this class in order to gain\n  // access to the props property and state property. Both now can be called via this.props and this.state \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      timeTaken: timeTaken,\n      numArrayBars: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n  \n  // componentDidMount() is a method is invoked after the component has been rendered.\n  // You can also add setState() method inside it, which will second time re-render the component\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const array = [];\n    for (let i = 0; i < this.state.numArrayBars; i++) {\n      array.push(randomIntFromInterval(5, 600));\n    }\n    const resetTime = 0;\n    this.setState({\n      array: array,\n      timeTaken: resetTime,\n    });\n  }\n\n  insertionSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getInsertionSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  selectionSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getSelectionSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getQuickSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  radixSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getRadixSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (animations[i][0] === animations[i][1])\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  \n  // a slider method to increase or decrease the number of bars in the array to sort.\n  handleChange(e){\n    const valueChange = e.target.value;\n    this.setState({numArrayBars: valueChange});\n    this.resetArray();\n  }\n\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"text-center\">\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.resetArray()}>Generate New Array</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.insertionSort()}>Insertion Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.selectionSort()}>Selection Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.mergeSort()}>Merge Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.quickSort()}>Quick Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.heapSort()}>Heap Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.radixSort()}>Radix Sort</button>\n          </span>\n          <div className='sliderBar'>\n            Array Size To Sort: <input type=\"range\" min=\"50\" max=\"280\" name='numArrayBars' value={this.state.numArrayBars} onChange={(e) => {this.handleChange(e)}} />\n            {this.state.numArrayBars}\n          </div>\n          <div className='array-container'>\n            {array.map((value, idx) => (\n              <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  height: `${value}px`,\n                }}></div>\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}","/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/mergeSortLogic.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/bubbleSortLogic.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/heapSortLogic.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/quickSortLogic.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/radixSortLogic.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/selectionSortLogic.js",[],[],"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/insertionSort.js",[],[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":29,"column":17,"nodeType":"75","endLine":29,"endColumn":54},{"ruleId":"76","severity":1,"message":"77","line":319,"column":10,"nodeType":"78","messageId":"79","endLine":319,"endColumn":24},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'arraysAreEqual' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]