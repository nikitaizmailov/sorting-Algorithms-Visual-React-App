{"ast":null,"code":"var _jsxFileName = \"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSortLogic.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSortLogic.js';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSortLogic.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSortLogic.js';\nimport { getRadixSortAnimations } from '../sortingAlgorithms/radixSortLogic.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSortLogic.js';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 200; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'lightblue'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; // This is the time taken for the selected Sorting Algorithm to run.\n\nlet timeTaken = 0;\nexport default class SortingVisualizer extends React.Component {\n  // We using constructor when initialising an object from this class in order to gain\n  // access to the props property and state property. Both now can be called via this.props and this.state \n  constructor(props) {\n    super(props);\n\n    this.resetArray = () => {\n      const array = [];\n\n      for (let i = 0; i < this.state.numArrayBars; i++) {\n        array.push(randomIntFromInterval(5, 600));\n      }\n\n      const resetTime = 0;\n      this.setState({\n        array: array,\n        timeTaken: resetTime\n      });\n    };\n\n    this.state = {\n      array: [],\n      timeTaken: timeTaken,\n      numArrayBars: NUMBER_OF_ARRAY_BARS\n    };\n  } // componentDidMount() is a method is invoked after the component has been rendered.\n  // You can also add setState() method inside it, which will second time re-render the component\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  insertionSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getInsertionSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = Array.isArray(animations[i][0]);\n\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i];\n\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  selectionSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getSelectionSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = Array.isArray(animations[i][0]);\n\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i];\n\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getQuickSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = Array.isArray(animations[i][0]);\n\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i];\n\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = Array.isArray(animations[i][0]);\n\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i];\n\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = Array.isArray(animations[i][0]);\n\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i];\n\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  radixSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getRadixSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = animations[i][0] === animations[i][1];\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } // a slider method to increase or decrease the number of bars in the array to sort.\n\n\n  handleChange(e) {\n    const valueChange = e.target.value;\n    this.setState({\n      numArrayBars: valueChange\n    });\n    this.resetArray();\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.resetArray(),\n            children: \"Generate New Array\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.insertionSort(),\n            children: \"Insertion Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.selectionSort(),\n            children: \"Selection Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.mergeSort(),\n            children: \"Merge Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.quickSort(),\n            children: \"Quick Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.heapSort(),\n            children: \"Heap Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.bubbleSort(),\n            children: \"Bubble Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.radixSort(),\n            children: \"Radix Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sliderBar\",\n          children: [\"Array Size To Sort: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"50\",\n            max: \"280\",\n            name: \"numArrayBars\",\n            value: this.state.numArrayBars,\n            onChange: e => {\n              this.handleChange(e);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 33\n          }, this), this.state.numArrayBars]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-container\",\n          children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"array-bar\",\n            style: {\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`\n            }\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getBubbleSortAnimations","getHeapSortAnimations","getQuickSortAnimations","getRadixSortAnimations","getSelectionSortAnimations","getInsertionSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","timeTaken","SortingVisualizer","Component","constructor","props","resetArray","array","i","state","numArrayBars","push","randomIntFromInterval","resetTime","setState","componentDidMount","insertionSort","animations","console","log","length","arrayBars","document","getElementsByClassName","isColorChange","Array","isArray","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","twoPackArray","ind","newHeight","height","selectionSort","mergeSort","quickSort","heapSort","bubbleSort","radixSort","handleChange","e","valueChange","target","value","render","map","idx","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSortLogic.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSortLogic.js';\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSortLogic.js'\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSortLogic.js';\nimport { getRadixSortAnimations } from '../sortingAlgorithms/radixSortLogic.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSortLogic.js';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort.js';\n\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'lightblue';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n// This is the time taken for the selected Sorting Algorithm to run.\nlet timeTaken = 0;\n\nexport default class SortingVisualizer extends React.Component {\n\n  // We using constructor when initialising an object from this class in order to gain\n  // access to the props property and state property. Both now can be called via this.props and this.state \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      timeTaken: timeTaken,\n      numArrayBars: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n  \n  // componentDidMount() is a method is invoked after the component has been rendered.\n  // You can also add setState() method inside it, which will second time re-render the component\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const array = [];\n    for (let i = 0; i < this.state.numArrayBars; i++) {\n      array.push(randomIntFromInterval(5, 600));\n    }\n    const resetTime = 0;\n    this.setState({\n      array: array,\n      timeTaken: resetTime,\n    });\n  }\n\n  insertionSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getInsertionSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  selectionSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getSelectionSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getQuickSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  radixSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getRadixSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (animations[i][0] === animations[i][1])\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  \n  // a slider method to increase or decrease the number of bars in the array to sort.\n  handleChange(e){\n    const valueChange = e.target.value;\n    this.setState({numArrayBars: valueChange});\n    this.resetArray();\n  }\n\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"text-center\">\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.resetArray()}>Generate New Array</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.insertionSort()}>Insertion Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.selectionSort()}>Selection Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.mergeSort()}>Merge Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.quickSort()}>Quick Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.heapSort()}>Heap Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.radixSort()}>Radix Sort</button>\n          </span>\n          <div className='sliderBar'>\n            Array Size To Sort: <input type=\"range\" min=\"50\" max=\"280\" name='numArrayBars' value={this.state.numArrayBars} onChange={(e) => {this.handleChange(e)}} />\n            {this.state.numArrayBars}\n          </div>\n          <div className='array-container'>\n            {array.map((value, idx) => (\n              <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  height: `${value}px`,\n                }}></div>\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}