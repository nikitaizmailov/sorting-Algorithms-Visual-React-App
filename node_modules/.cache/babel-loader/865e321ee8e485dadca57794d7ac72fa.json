{"ast":null,"code":"var _jsxFileName = \"/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSortLogic.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSortLogic.js';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSortLogic.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 200; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'lightblue'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  // We using constructor when initialising an object from this class in order to gain\n  // access to the props property and state property. Both now can be called via this.props and this.state \n  constructor(props) {\n    super(props);\n\n    this.resetArray = () => {\n      const array = [];\n\n      for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n        array.push(randomIntFromInterval(5, 600));\n      }\n\n      this.setState({\n        array\n      });\n    };\n\n    this.state = {\n      array: []\n    };\n  } // componentDidMount() is a method is invoked after the component has been rendered.\n  // You can also add setState() method inside it, which will second time re-render the component\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = Array.isArray(animations[i][0]);\n\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i];\n\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = Array.isArray(animations[i][0]);\n\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i];\n\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.resetArray(),\n            children: \"Generate New Array\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.mergeSort(),\n            children: \"Merge Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.quickSort(),\n            children: \"Quick Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.heapSort(),\n            children: \"Heap Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"buttonDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => this.bubbleSort(),\n            children: \"Bubble Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-container\",\n          children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"array-bar\",\n            style: {\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`\n            }\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getBubbleSortAnimations","getHeapSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","resetArray","array","i","push","randomIntFromInterval","setState","state","componentDidMount","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","console","log","Array","isArray","twoPackArray","ind","bubbleSort","render","map","value","idx","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSortLogic.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSortLogic.js';\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSortLogic.js'\n\n\n\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'lightblue';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n\n  // We using constructor when initialising an object from this class in order to gain\n  // access to the props property and state property. Both now can be called via this.props and this.state \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n  \n  // componentDidMount() is a method is invoked after the component has been rendered.\n  // You can also add setState() method inside it, which will second time re-render the component\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 600));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = (Array.isArray(animations[i][0]))\n      if (!isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const twoPackArray = animations[i]\n        for (let ind = 0; ind < twoPackArray.length; ind++) {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = twoPackArray[ind];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS)\n        }\n      }\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"text-center\">\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.resetArray()}>Generate New Array</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.mergeSort()}>Merge Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.quickSort()}>Quick Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.heapSort()}>Heap Sort</button>\n          </span>\n          <span className='buttonDiv'>\n            <button className='btn btn-success' onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          </span>\n          <div className='array-container'>\n            {array.map((value, idx) => (\n              <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  height: `${value}px`,\n                }}></div>\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}