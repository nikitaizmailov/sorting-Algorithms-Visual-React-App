{"ast":null,"code":"function getRadixSortAnimations(array) {\n  const animations = [];\n  if (array.length === 0) return array;\n  const maxNumber = Math.max(...array);\n  let digit = 0;\n\n  while (maxNumber / 10 ** digit > 0) {\n    countingSort(array, digit, animations);\n    digit++;\n  }\n\n  return animations;\n}\n\nfunction countingSort(array, digit, animations) {\n  const sortedArray = new Array(array.length).fill(0);\n  const countArray = new Array(10).fill(0);\n  const digitColumn = 10 ** digit;\n\n  for (const num of array) {\n    const countIndex = Math.floor(num / digitColumn) % 10;\n    countArray[countIndex]++;\n  }\n\n  for (let idx = 1; idx < 10; idx++) {\n    countArray[idx] += countArray[idx - 1];\n  }\n\n  for (let idx = array.length - 1; idx > -1; idx--) {\n    const countIndex = Math.floor(array[idx] / digitColumn) % 10;\n    countArray[countIndex]--;\n    const sortedIndex = countArray[countIndex];\n    sortedArray[sortedIndex] = array[idx];\n  }\n\n  for (let idx = 0; idx < array.length; idx++) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([idx, sortedArray[idx]]); // These are the values that we're comparing; we push them once\n    // to change their color.\n\n    array[idx] = sortedArray[idx];\n  }\n}\n\nexport { getRadixSortAnimations };","map":{"version":3,"sources":["/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/radixSortLogic.js"],"names":["getRadixSortAnimations","array","animations","length","maxNumber","Math","max","digit","countingSort","sortedArray","Array","fill","countArray","digitColumn","num","countIndex","floor","idx","sortedIndex","push"],"mappings":"AAAA,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AACnC,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB,OAAOF,KAAP;AACxB,QAAMG,SAAS,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGL,KAAZ,CAAlB;AAEA,MAAIM,KAAK,GAAG,CAAZ;;AACA,SAAOH,SAAS,GAAC,MAAMG,KAAhB,GAAwB,CAA/B,EAAkC;AAC9BC,IAAAA,YAAY,CAACP,KAAD,EAAQM,KAAR,EAAeL,UAAf,CAAZ;AACAK,IAAAA,KAAK;AACR;;AAED,SAAOL,UAAP;AACH;;AAED,SAASM,YAAT,CAAsBP,KAAtB,EAA6BM,KAA7B,EAAoCL,UAApC,EAAgD;AAC5C,QAAMO,WAAW,GAAG,IAAIC,KAAJ,CAAUT,KAAK,CAACE,MAAhB,EAAwBQ,IAAxB,CAA6B,CAA7B,CAApB;AACA,QAAMC,UAAU,GAAG,IAAIF,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,CAAnB,CAAnB;AAEA,QAAME,WAAW,GAAG,MAAMN,KAA1B;;AACA,OAAK,MAAMO,GAAX,IAAkBb,KAAlB,EAAyB;AACrB,UAAMc,UAAU,GAAGV,IAAI,CAACW,KAAL,CAAWF,GAAG,GAAGD,WAAjB,IAAgC,EAAnD;AACAD,IAAAA,UAAU,CAACG,UAAD,CAAV;AACH;;AAED,OAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AAC/BL,IAAAA,UAAU,CAACK,GAAD,CAAV,IAAmBL,UAAU,CAACK,GAAG,GAAG,CAAP,CAA7B;AACH;;AAED,OAAK,IAAIA,GAAG,GAAGhB,KAAK,CAACE,MAAN,GAAe,CAA9B,EAAiCc,GAAG,GAAG,CAAC,CAAxC,EAA2CA,GAAG,EAA9C,EAAkD;AAC9C,UAAMF,UAAU,GAAGV,IAAI,CAACW,KAAL,CAAWf,KAAK,CAACgB,GAAD,CAAL,GAAaJ,WAAxB,IAAuC,EAA1D;AACAD,IAAAA,UAAU,CAACG,UAAD,CAAV;AACA,UAAMG,WAAW,GAAGN,UAAU,CAACG,UAAD,CAA9B;AACAN,IAAAA,WAAW,CAACS,WAAD,CAAX,GAA2BjB,KAAK,CAACgB,GAAD,CAAhC;AACH;;AAED,OAAK,IAAIA,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGhB,KAAK,CAACE,MAA9B,EAAsCc,GAAG,EAAzC,EAA6C;AACzC;AACA;AACAf,IAAAA,UAAU,CAACiB,IAAX,CAAgB,CAACF,GAAD,EAAMR,WAAW,CAACQ,GAAD,CAAjB,CAAhB,EAHyC,CAKzC;AACA;;AACAhB,IAAAA,KAAK,CAACgB,GAAD,CAAL,GAAaR,WAAW,CAACQ,GAAD,CAAxB;AACH;AACJ;;AAED,SAAQjB,sBAAR","sourcesContent":["function getRadixSortAnimations(array) {\n    const animations = [];\n    if (array.length === 0) return array;\n    const maxNumber = Math.max(...array);\n\n    let digit = 0;\n    while (maxNumber/10 ** digit > 0) {\n        countingSort(array, digit, animations);\n        digit++;\n    }\n\n    return animations;\n}\n\nfunction countingSort(array, digit, animations) {\n    const sortedArray = new Array(array.length).fill(0);\n    const countArray = new Array(10).fill(0);\n\n    const digitColumn = 10 ** digit;\n    for (const num of array) {\n        const countIndex = Math.floor(num / digitColumn) % 10;\n        countArray[countIndex]++;\n    }\n\n    for (let idx = 1; idx < 10; idx++) {\n        countArray[idx] += countArray[idx - 1];\n    }\n\n    for (let idx = array.length - 1; idx > -1; idx--) {\n        const countIndex = Math.floor(array[idx] / digitColumn) % 10;\n        countArray[countIndex]--;\n        const sortedIndex = countArray[countIndex];\n        sortedArray[sortedIndex] = array[idx];\n    }\n\n    for (let idx = 0; idx < array.length; idx++) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([idx, sortedArray[idx]]);\n\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        array[idx] = sortedArray[idx];\n    }\n}\n\nexport {getRadixSortAnimations};"]},"metadata":{},"sourceType":"module"}