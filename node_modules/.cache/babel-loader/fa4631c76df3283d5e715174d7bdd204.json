{"ast":null,"code":"function getQuickSortAnimations(array) {\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return array;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) {\n    return;\n  }\n\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n\n  while (rightIdx >= leftIdx) {\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(leftIdx, rightIdx, array, animations);\n    }\n\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\n  }\n\n  swap(pivotIdx, rightIdx, array, animations);\n  const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n}\n\nfunction swap(i, j, array, animations) {\n  let temp = array[j]; // These are the values that we're comparing; we push them once\n  // to change their color.\n\n  animations.push([i, j]); // These are the values that we're comparing; we push them once\n  // to change their color.\n\n  animations.push([i, j]); // we overwrite the value at index j with value from array at index i\n  // we overwrite the value at index i with value from array at index j\n\n  animations.push([[j, array[i]], [i, array[j]]]);\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nexport { getQuickSortAnimations };","map":{"version":3,"sources":["/Users/nikitaizmailov/js/react-sort-project/sorting-algorithms/src/sortingAlgorithms/quickSortLogic.js"],"names":["getQuickSortAnimations","array","animations","quickSortHelper","length","startIdx","endIdx","pivotIdx","leftIdx","rightIdx","swap","leftSubarrayIsSmaller","i","j","temp","push"],"mappings":"AAAA,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AACnC,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,eAAe,CAACF,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACG,MAAN,GAAe,CAA1B,EAA6BF,UAA7B,CAAf;AACA,SAAOD,KAAP;AACH;;AAED,SAASE,eAAT,CAAyBF,KAAzB,EAAgCI,QAAhC,EAA0CC,MAA1C,EAAkDJ,UAAlD,EAA8D;AAC1D,MAAIG,QAAQ,IAAIC,MAAhB,EAAwB;AACpB;AACH;;AACD,QAAMC,QAAQ,GAAGF,QAAjB;AACA,MAAIG,OAAO,GAAGH,QAAQ,GAAG,CAAzB;AACA,MAAII,QAAQ,GAAGH,MAAf;;AACA,SAAOG,QAAQ,IAAID,OAAnB,EAA4B;AACxB,QAAIP,KAAK,CAACO,OAAD,CAAL,GAAiBP,KAAK,CAACM,QAAD,CAAtB,IAAoCN,KAAK,CAACQ,QAAD,CAAL,GAAkBR,KAAK,CAACM,QAAD,CAA/D,EAA2E;AACvEG,MAAAA,IAAI,CAACF,OAAD,EAAUC,QAAV,EAAoBR,KAApB,EAA2BC,UAA3B,CAAJ;AACH;;AACD,QAAID,KAAK,CAACO,OAAD,CAAL,IAAkBP,KAAK,CAACM,QAAD,CAA3B,EAAuCC,OAAO;AAC9C,QAAIP,KAAK,CAACQ,QAAD,CAAL,IAAmBR,KAAK,CAACM,QAAD,CAA5B,EAAwCE,QAAQ;AACnD;;AACDC,EAAAA,IAAI,CAACH,QAAD,EAAWE,QAAX,EAAqBR,KAArB,EAA4BC,UAA5B,CAAJ;AACA,QAAMS,qBAAqB,GAAGF,QAAQ,GAAG,CAAX,GAAeJ,QAAf,GAA0BC,MAAM,IAAIG,QAAQ,GAAG,CAAf,CAA9D;;AACA,MAAIE,qBAAJ,EAA2B;AACvBR,IAAAA,eAAe,CAACF,KAAD,EAAQI,QAAR,EAAkBI,QAAQ,GAAG,CAA7B,EAAgCP,UAAhC,CAAf;AACAC,IAAAA,eAAe,CAACF,KAAD,EAAQQ,QAAQ,GAAG,CAAnB,EAAsBH,MAAtB,EAA8BJ,UAA9B,CAAf;AACH,GAHD,MAGO;AACHC,IAAAA,eAAe,CAACF,KAAD,EAAQQ,QAAQ,GAAG,CAAnB,EAAsBH,MAAtB,EAA8BJ,UAA9B,CAAf;AACAC,IAAAA,eAAe,CAACF,KAAD,EAAQI,QAAR,EAAkBI,QAAQ,GAAG,CAA7B,EAAgCP,UAAhC,CAAf;AACH;AACJ;;AAED,SAASQ,IAAT,CAAcE,CAAd,EAAiBC,CAAjB,EAAoBZ,KAApB,EAA2BC,UAA3B,EAAuC;AACnC,MAAIY,IAAI,GAAGb,KAAK,CAACY,CAAD,CAAhB,CADmC,CAGnC;AACA;;AACAX,EAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,CAAD,EAAIC,CAAJ,CAAhB,EALmC,CAOnC;AACA;;AACAX,EAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,CAAD,EAAIC,CAAJ,CAAhB,EATmC,CAUnC;AACA;;AACAX,EAAAA,UAAU,CAACa,IAAX,CAAgB,CAAC,CAACF,CAAD,EAAIZ,KAAK,CAACW,CAAD,CAAT,CAAD,EAAgB,CAACA,CAAD,EAAIX,KAAK,CAACY,CAAD,CAAT,CAAhB,CAAhB;AAEAZ,EAAAA,KAAK,CAACY,CAAD,CAAL,GAAWZ,KAAK,CAACW,CAAD,CAAhB;AACAX,EAAAA,KAAK,CAACW,CAAD,CAAL,GAAWE,IAAX;AACH;;AAED,SAAQd,sBAAR","sourcesContent":["function getQuickSortAnimations(array) {\n    const animations = [];\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return array;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\n    if (startIdx >= endIdx) {\n        return;\n    }\n    const pivotIdx = startIdx;\n    let leftIdx = startIdx + 1;\n    let rightIdx = endIdx;\n    while (rightIdx >= leftIdx) {\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n            swap(leftIdx, rightIdx, array, animations);\n        }\n        if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\n        if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\n    }\n    swap(pivotIdx, rightIdx, array, animations);\n    const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n    if (leftSubarrayIsSmaller) {\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    } else {\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    }\n}\n\nfunction swap(i, j, array, animations) {\n    let temp = array[j];\n\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // we overwrite the value at index j with value from array at index i\n    // we overwrite the value at index i with value from array at index j\n    animations.push([[j, array[i]], [i, array[j]]]);\n\n    array[j] = array[i];\n    array[i] = temp\n}\n\nexport {getQuickSortAnimations};"]},"metadata":{},"sourceType":"module"}